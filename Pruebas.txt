//Pruebas
// -------------------------------------------------------------------------Real time - Create - Join-------------------------------------------------------------
//Imprime y,q,x esto por el tiempo que tiene asiganado cada uno
#include "Thread.h"


// this function is run by the second thread */
void * inc_x(void * x_void_ptr)
{
  /* increment x to 100 */
  int a = * ((int * ) x_void_ptr);

  while (++(a) < 5) 
  {
    printf("x: %d\n", a);
    mythread_sleep(500);
  }

  printf("x increment finished\n");

}

void * inc_q(void * q_void_ptr)
{
  /* increment x to 100 */
  int a = * ((int * ) q_void_ptr);

  while (++(a) < 5) 
  {
    printf("q: %d\n", a);
    mythread_sleep(500);
  }

  printf("q increment finished\n");

}

void * inc_y(void * y_void_ptr)
{
  /* increment x to 100 */
  int a = * ((int * ) y_void_ptr);

  while (++(a) < 5) 
  {
    printf("y: %d\n", a);
    mythread_sleep(500);
  }

  printf("y increment finished\n");

}

int main() 
{

  mythread_init();

  int x = 0, y = 0, q=0;

  // show the initial values
  printf("x: %d, y: %d, q: %d\n", x, y, q);

  // thread refrences
  int inc_x_thread;
  int inc_y_thread;
  int inc_q_thread;

  // create threads
  inc_x_thread = mythread_create(inc_x, ROUNDROBIN, 0, & x, 34); 
  inc_y_thread = mythread_create(inc_y, RAFFLE, 0, & y, 1); 
  inc_q_thread = mythread_create(inc_q, ROUNDROBIN, 0, & q, 5); 

  //join
  mythread_join(inc_x_thread);
  mythread_join(inc_y_thread);
  mythread_join(inc_q_thread);

  // show the results - x is now 100 thanks to the second thread */
  printf("x: %d, y: %d, q: %d\n", x, y,q);

  return 0;
}

//----------------------------------------------------------------detach-----------------------------------------------------------------------------------------
#include "Thread.h"


// this function is run by the second thread */
void * inc_x(void * x_void_ptr)
{
  /* increment x to 100 */
  int a = * ((int * ) x_void_ptr);

  while (++(a) < 5) 
  {
    printf("x: %d\n", a);
    mythread_sleep(1000);
  }

  printf("x increment finished\n");

}

void * inc_q(void * q_void_ptr)
{
  /* increment x to 100 */
  int a = * ((int * ) q_void_ptr);

  while (++(a) < 5) 
  {
    printf("q: %d\n", a);
    mythread_sleep(500);
  }

  printf("q increment finished\n");

}

void * inc_y(void * y_void_ptr)
{
  /* increment x to 100 */
  int a = * ((int * ) y_void_ptr);

  while (++(a) < 5) 
  {
    printf("y: %d\n", a);
    mythread_sleep(500);
  }

  printf("y increment finished\n");

}

int main() 
{

  mythread_init();

  int x = 0, y = 0, q=0;

  // show the initial values
  printf("x: %d, y: %d, q: %d\n", x, y, q);

  // thread refrences
  int inc_x_thread;
  int inc_y_thread;
  int inc_q_thread;

  // create threads 
  inc_x_thread = mythread_create(inc_x, ROUNDROBIN, 0, & x, 34);  
  inc_y_thread = mythread_create(inc_y, RAFFLE, 0, & y, 1);   
  inc_q_thread = mythread_create(inc_q, ROUNDROBIN, 0, & q, 5); 

  //mythread_sleep(1000);
  //mythread_end(inc_x_thread);
  //printf("Ya desperte\n");

  //join
  mythread_detach(inc_x_thread);
 // mythread_join(inc_x_thread);
  mythread_join(inc_y_thread);
  mythread_join(inc_q_thread);

  

  // show the results - x is now 100 thanks to the second thread */
  printf("x: %d, y: %d, q: %d\n", x, y,q);

  return 0;
}


//-----------------------------------------------------------------------MUTEX------------------------------------------------------------------------------------
#include "Thread.h"

int counter;
mutext* lock;


void* doSomeThing(void *arg)
{
    printf("Entre no hay mutex lock: %d\n",my_mutex_trylock(lock));
    
    mymutex_lock(lock);

    unsigned long i = 0;
    counter += 1;
    printf("\n Job %d started\n", counter);

    for(i=0; i<(0xFFFFFFFF);i++);

    printf("\n Job %d finished\n", counter);

    mymutex_unlock(lock);

    return NULL;
}



int main() 
{
    mythread_init();
    int i = 0;
   
    lock = mymutex_init();
   
    if (lock == 0)
    {
        printf("\n mutex init failed\n");
        return 1;
    }

    int inc_x_thread;
    int inc_y_thread;
    inc_x_thread=mythread_create(doSomeThing, ROUNDROBIN, 0, & i, 34);
    inc_y_thread=mythread_create(doSomeThing, ROUNDROBIN, 0, & i, 34);   

    mythread_join(inc_x_thread);
    mythread_join(inc_y_thread);
    mymutex_destroy(lock);

    return 0;
}
//-----------------------------------------------------------------------------YIELD------------------------------------------------------------------------------
#include "Thread.h"
#include <stdio.h>                                                              
#include <unistd.h> 

                                                           
                                                                                
void *thread(void *arg) {                                                                          
  while (1) {   
    printf("%s\n",(char*) arg );                       
                                                         
    mythread_yield();                                                        
  }                                                                             
}  


int main() 
{
   // printf("Inicie\n" );
    mythread_init();  

    int inc_x_thread;
    int inc_y_thread;
    int inc_q_thread;
    inc_x_thread=mythread_create(thread, ROUNDROBIN, 0,"thread 1", 34);
    inc_y_thread=mythread_create(thread, ROUNDROBIN, 0, "thread 2", 34);   
    inc_q_thread=mythread_create(thread, ROUNDROBIN, 0, "thread 3", 34);   

    mythread_join(inc_x_thread);
    mythread_join(inc_y_thread);
    mythread_join(inc_q_thread);

    return 0;
}